{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxWhitelistedAddresses",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addAddressToWhitelist_AddressesLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addAddressToWhitelist_SenderAlreadyWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addAddressToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumAddressesWhitelisted",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "index",
          "type": "address"
        }
      ],
      "name": "getWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf92ef6c3d05d68116d97b3da01ac040d338e38dec42cca5f5e0aa0bbe4089268",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "320412",
    "logsBloom": "0x
    "blockHash": "0xa9f388bd8c8bffa0da41c44ee631a582fd0116621a6599df9bb535f045045120",
    "transactionHash": "0xf92ef6c3d05d68116d97b3da01ac040d338e38dec42cca5f5e0aa0bbe4089268",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "320412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "0c307034589b1d5f8c48c16e75346ba3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxWhitelistedAddresses\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addAddressToWhitelist_AddressesLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addAddressToWhitelist_SenderAlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumAddressesWhitelisted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"}],\"name\":\"getWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kehinde A.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Whitelist dApp\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAddressToWhitelist()\":{\"notice\":\"This function adds the address of the sender to the whitelist\"}},\"notice\":\"You can use this contract for creating a whitelist dapp when you are launching your NFT collection\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/*//////////////////////////////////////////////////////////////   \\n                        Custom Errors\\n//////////////////////////////////////////////////////////////*/\\nerror addAddressToWhitelist_SenderAlreadyWhitelisted();\\nerror addAddressToWhitelist_AddressesLimitReached();\\n\\n/// @title Whitelist dApp\\n/// @author Kehinde A.\\n/// @notice You can use this contract for creating a whitelist dapp when you are launching your NFT collection\\ncontract Whitelist {\\n    /*//////////////////////////////////////////////////////////////   \\n                            Variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    //Max number of whitelisted addresses allowed\\n    uint8 private immutable i_maxWhitelistedAddresses;\\n\\n    // Create a mapping of whitelistedAddresses\\n    // if an address is whitelisted, we would set it to true, it is false by default for all other addresses.\\n    mapping(address => bool) public s_whitelistedAddresses;\\n\\n    // numAddressesWhitelisted would be used to keep track of how many addresses have been whitelisted\\n    // NOTE: Don't change this variable name, as it will be part of verification\\n    uint8 s_numAddressesWhitelisted;\\n\\n    /*//////////////////////////////////////////////////////////////   \\n                        Constructor Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // Setting the Max number of whitelisted addresses\\n    // User will put the value at the time of deployment\\n    constructor(uint8 _maxWhitelistedAddresses) {\\n        i_maxWhitelistedAddresses = _maxWhitelistedAddresses;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////   \\n                            Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice This function adds the address of the sender to the whitelist\\n    function addAddressToWhitelist() public {\\n        //check if the user has already been whitelisted\\n        if (s_whitelistedAddresses[msg.sender]) {\\n            revert addAddressToWhitelist_SenderAlreadyWhitelisted();\\n        }\\n\\n        // check if the numAddressesWhitelisted > maxWhitelistedAddresses, if not then throw an error.\\n        if (s_numAddressesWhitelisted > i_maxWhitelistedAddresses) {\\n            revert addAddressToWhitelist_AddressesLimitReached();\\n        }\\n\\n        // Add the address which called the function to the whitelistedAddress array\\n        s_whitelistedAddresses[msg.sender] = true;\\n\\n        // Increase the number of whitelisted addresses\\n        s_numAddressesWhitelisted += 1;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////   \\n                            Getter Functions\\n    //////////////////////////////////////////////////////////////*/\\n    function getMaxWhitelistedAddresses() public view returns (uint8) {\\n        return i_maxWhitelistedAddresses;\\n    }\\n\\n    function getWhitelistedAddresses(address index) public view returns (bool) {\\n        return s_whitelistedAddresses[index];\\n    }\\n\\n    function getNumAddressesWhitelisted() public view returns (uint8) {\\n        return s_numAddressesWhitelisted;\\n    }\\n}\\n// -----------------------------------------\\n// Contract whitelist deployed at: 0x685F9Bf3339eaDa1484D574ab028880D3adC29Fb\\n// -----------------------------------------\\n// Successfully verified contract Whitelist on Etherscan.\\n// https://goerli.etherscan.io/address/0xa19b4306455ec5964C774850ef30021208eaa2Ce#code\\n\",\"keccak256\":\"0x926f7b7b0ae849279f8814e1c2bddea346b8e83464372f05d5b7f2426cad2db9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516105a33803806105a383398181016040528101906100329190610084565b8060ff1660808160ff1681525050506100b1565b600080fd5b600060ff82169050919050565b6100618161004b565b811461006c57600080fd5b50565b60008151905061007e81610058565b92915050565b60006020828403121561009a57610099610046565b5b60006100a88482850161006f565b91505092915050565b6080516104d06100d36000396000818161018701526102a701526104d06000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80638e7314d91461005c578063e9e0f31714610066578063ef87fa0814610096578063f42ab156146100b4578063f6d97409146100e4575b600080fd5b610064610102565b005b610080600480360381019061007b919061039a565b610283565b60405161008d91906103e2565b60405180910390f35b61009e6102a3565b6040516100ab9190610419565b60405180910390f35b6100ce60048036038101906100c9919061039a565b6102cb565b6040516100db91906103e2565b60405180910390f35b6100ec610320565b6040516100f99190610419565b60405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610185576040517fb7243ab500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff16600160009054906101000a900460ff1660ff1611156101f4576040517f7817e6e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008282829054906101000a900460ff166102699190610463565b92506101000a81548160ff021916908360ff160217905550565b60006020528060005260406000206000915054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600160009054906101000a900460ff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103678261033c565b9050919050565b6103778161035c565b811461038257600080fd5b50565b6000813590506103948161036e565b92915050565b6000602082840312156103b0576103af610337565b5b60006103be84828501610385565b91505092915050565b60008115159050919050565b6103dc816103c7565b82525050565b60006020820190506103f760008301846103d3565b92915050565b600060ff82169050919050565b610413816103fd565b82525050565b600060208201905061042e600083018461040a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061046e826103fd565b9150610479836103fd565b92508260ff0382111561048f5761048e610434565b5b82820190509291505056fea26469706673582212206fe67fc588814868dbe6974ced0a32ac7feb7beb20f1b322a9b40ca0eea83a9764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80638e7314d91461005c578063e9e0f31714610066578063ef87fa0814610096578063f42ab156146100b4578063f6d97409146100e4575b600080fd5b610064610102565b005b610080600480360381019061007b919061039a565b610283565b60405161008d91906103e2565b60405180910390f35b61009e6102a3565b6040516100ab9190610419565b60405180910390f35b6100ce60048036038101906100c9919061039a565b6102cb565b6040516100db91906103e2565b60405180910390f35b6100ec610320565b6040516100f99190610419565b60405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610185576040517fb7243ab500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff16600160009054906101000a900460ff1660ff1611156101f4576040517f7817e6e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008282829054906101000a900460ff166102699190610463565b92506101000a81548160ff021916908360ff160217905550565b60006020528060005260406000206000915054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600160009054906101000a900460ff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103678261033c565b9050919050565b6103778161035c565b811461038257600080fd5b50565b6000813590506103948161036e565b92915050565b6000602082840312156103b0576103af610337565b5b60006103be84828501610385565b91505092915050565b60008115159050919050565b6103dc816103c7565b82525050565b60006020820190506103f760008301846103d3565b92915050565b600060ff82169050919050565b610413816103fd565b82525050565b600060208201905061042e600083018461040a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061046e826103fd565b9150610479836103fd565b92508260ff0382111561048f5761048e610434565b5b82820190509291505056fea26469706673582212206fe67fc588814868dbe6974ced0a32ac7feb7beb20f1b322a9b40ca0eea83a9764736f6c63430008090033",
  "devdoc": {
    "author": "Kehinde A.",
    "kind": "dev",
    "methods": {},
    "title": "Whitelist dApp",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAddressToWhitelist()": {
        "notice": "This function adds the address of the sender to the whitelist"
      }
    },
    "notice": "You can use this contract for creating a whitelist dapp when you are launching your NFT collection",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12,
        "contract": "contracts/Whitelist.sol:Whitelist",
        "label": "s_whitelistedAddresses",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14,
        "contract": "contracts/Whitelist.sol:Whitelist",
        "label": "s_numAddressesWhitelisted",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}