{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "whitelistAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "mint_ExceededMaximumSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "mint_NotEnoughETHSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "mint_PresaleHasNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "presaleMint_ExceededMaximumSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "presaleMint_NotEnoughETHSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "presaleMint_NotOnWhitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "presaleMint_PresaleHasNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "withdraw_FailedToSendEther",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPausedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getpresaleEnded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getpresaleState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_presaleEnded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_presaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setPasued",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbe9bba892e41b69dd42d9ab547a313fd7513e5ff671968db6c36a7057734a5fd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3483442",
    "logsBloom": "0x
    "blockHash": "0x988bc4f97a0d2926c6d9b0693a82dbae7f0d0e25f281dfd419327d4469d3fdc4",
    "transactionHash": "0xbe9bba892e41b69dd42d9ab547a313fd7513e5ff671968db6c36a7057734a5fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xbe9bba892e41b69dd42d9ab547a313fd7513e5ff671968db6c36a7057734a5fd",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x988bc4f97a0d2926c6d9b0693a82dbae7f0d0e25f281dfd419327d4469d3fdc4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3483442",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://crypto-dev-nft-collection-frontend-4fb9.vercel.app/api/",
    "0x685F9Bf3339eaDa1484D574ab028880D3adC29Fb"
  ],
  "numDeployments": 1,
  "solcInputHash": "1388f4561c1bd30f7a06e38232780ad1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"mint_ExceededMaximumSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"mint_NotEnoughETHSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"mint_PresaleHasNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"presaleMint_ExceededMaximumSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"presaleMint_NotEnoughETHSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"presaleMint_NotOnWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"presaleMint_PresaleHasNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"withdraw_FailedToSendEther\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpresaleEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpresaleState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_presaleEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_presaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPasued\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kehinde A.\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"ERC721 constructor takes in a `name` and a `symbol` to the token collection. name in our case is `Crypto Devs` and symbol is `CD`. Constructor for Crypto Devs takes in the baseURI to set _baseTokenURI for the collection. It also initializes an instance of whitelist interface.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint()\":{\"details\":\"mint allows a user to mint 1 NFT per transaction after the presale has ended.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"presaleMint()\":{\"details\":\"presaleMint allows a user to mint one NFT per transaction during the presale.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setPasued(bool)\":{\"details\":\"setPaused makes the contract paused or unpaused\"},\"startPresale()\":{\"details\":\"startPresale starts a presale for the whitelisted addresses\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"withdraw sends all the ether in the contract to the owner of the contract\"}},\"stateVariables\":{\"s_baseToknURI\":{\"details\":\"_baseTokenURI for computing {tokenURI}. If set, the resulting URI for each token will be the concatenation of the `baseURI` and the `tokenId`.\"}},\"title\":\"NFT collection\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a 20 \\\"Crypto Dev\\\" NFT's and each one of them will be unique. User's will beable to mint only 1 NFT with one transaction. Whitelisted users, should have a 5 min presale period before the actual sale where they are guaranteed 1 NFT per transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTCollection.sol\":\"NFTCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IWhitelist {\\r\\n    function getWhitelistedAddresses(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f95a26f30b14954ee0d0e205f5fcbe9ee6f3933029dcc6db5c1ea12203e434\",\"license\":\"MIT\"},\"contracts/NFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/*//////////////////////////////////////////////////////////////   \\r\\n                            Imports\\r\\n//////////////////////////////////////////////////////////////*/\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\r\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport './IWhitelist.sol';\\r\\n\\r\\n/*//////////////////////////////////////////////////////////////   \\r\\n                            Custom Errors\\r\\n//////////////////////////////////////////////////////////////*/\\r\\n\\r\\nerror presaleMint_PresaleHasNotStarted();\\r\\nerror presaleMint_NotOnWhitelist();\\r\\nerror presaleMint_ExceededMaximumSupply();\\r\\nerror presaleMint_NotEnoughETHSent();\\r\\nerror mint_PresaleHasNotEnded();\\r\\nerror mint_NotEnoughETHSent();\\r\\nerror mint_ExceededMaximumSupply();\\r\\nerror withdraw_FailedToSendEther();\\r\\n\\r\\n/// @title NFT collection\\r\\n/// @author Kehinde A.\\r\\n/// @notice This contract is for creating a 20 \\\"Crypto Dev\\\" NFT's and each one of them will be unique. User's will beable to mint only 1 NFT with one transaction. Whitelisted users, should have a 5 min presale period before the actual sale where they are guaranteed 1 NFT per transaction.\\r\\n/// @dev All function calls are currently implemented without side effects\\r\\ncontract NFTCollection is ERC721Enumerable, Ownable {\\r\\n    /*//////////////////////////////////////////////////////////////   \\r\\n                            State variables\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @dev _baseTokenURI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\r\\n     */\\r\\n    string private s_baseToknURI;\\r\\n\\r\\n    // PRICE is the price of one Crypto Dev NFT\\r\\n    uint256 private constant PRICE = 0.01 ether;\\r\\n\\r\\n    //s_paused is used to pause the contract in case of an emergency\\r\\n    bool private s_paused;\\r\\n\\r\\n    // max number of CryptoDevs NFT\\r\\n    uint256 private constant MAXTOKENIDS = 20;\\r\\n\\r\\n    // total number of tokenIds minted\\r\\n    uint256 private s_tokenIds;\\r\\n\\r\\n    // Whitelist contract instance\\r\\n    IWhitelist whitelist;\\r\\n\\r\\n    // boolean to keep track of whether presale started or not\\r\\n    bool public s_presaleStarted;\\r\\n\\r\\n    // timestamp for when presale would end\\r\\n    uint256 public s_presaleEnded;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////   \\r\\n                            Modifier\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    //Update revert to an if statemnet and add to testing !!\\r\\n    modifier onlyWhenNotPaused() {\\r\\n        require(!s_paused, 'Contract currently paused');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////   \\r\\n                            Constructor Function\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @dev ERC721 constructor takes in a `name` and a `symbol` to the token collection.\\r\\n     * name in our case is `Crypto Devs` and symbol is `CD`.\\r\\n     * Constructor for Crypto Devs takes in the baseURI to set _baseTokenURI for the collection.\\r\\n     * It also initializes an instance of whitelist interface.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory baseURI,\\r\\n        address whitelistAddress\\r\\n    ) ERC721('Crypto Devs', 'CD') {\\r\\n        s_baseToknURI = baseURI;\\r\\n        whitelist = IWhitelist(whitelistAddress);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////   \\r\\n                        Function\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @dev startPresale starts a presale for the whitelisted addresses\\r\\n     */\\r\\n    function startPresale() public onlyOwner {\\r\\n        s_presaleStarted = true;\\r\\n        s_presaleEnded = block.timestamp + 5 minutes; // Set presaleEnded time as current timestamp + 5 minutes\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev presaleMint allows a user to mint one NFT per transaction during the presale.\\r\\n     */\\r\\n    function presaleMint() public payable onlyWhenNotPaused {\\r\\n        if (!(s_presaleStarted) || (block.timestamp > s_presaleEnded)) {\\r\\n            revert presaleMint_PresaleHasNotStarted();\\r\\n        }\\r\\n        if (!(whitelist.getWhitelistedAddresses(msg.sender))) {\\r\\n            revert presaleMint_NotOnWhitelist();\\r\\n        }\\r\\n        // 3 >= 2\\r\\n        if (s_tokenIds >= MAXTOKENIDS) {\\r\\n            revert presaleMint_ExceededMaximumSupply();\\r\\n        }\\r\\n        if (msg.value < PRICE) {\\r\\n            revert presaleMint_NotEnoughETHSent();\\r\\n        }\\r\\n        s_tokenIds += 1;\\r\\n        _safeMint(msg.sender, s_tokenIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint allows a user to mint 1 NFT per transaction after the presale has ended.\\r\\n     */\\r\\n    function mint() public payable onlyWhenNotPaused {\\r\\n        if (!(s_presaleStarted) || (block.timestamp < s_presaleEnded)) {\\r\\n            revert mint_PresaleHasNotEnded();\\r\\n        }\\r\\n        if (s_tokenIds >= MAXTOKENIDS) {\\r\\n            revert mint_ExceededMaximumSupply();\\r\\n        }\\r\\n        if (msg.value < PRICE) {\\r\\n            revert mint_NotEnoughETHSent();\\r\\n        }\\r\\n        s_tokenIds += 1;\\r\\n        _safeMint(msg.sender, s_tokenIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev _baseURI overides the Openzeppelin's ERC721 implementation which by default\\r\\n     * returned an empty string for the baseURI\\r\\n     */\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return s_baseToknURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev setPaused makes the contract paused or unpaused\\r\\n     */\\r\\n    function setPasued(bool status) public onlyOwner {\\r\\n        s_paused = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev withdraw sends all the ether in the contract\\r\\n     * to the owner of the contract\\r\\n     */\\r\\n    function withdraw() public onlyOwner {\\r\\n        address _owner = owner();\\r\\n        uint256 amount = address(this).balance;\\r\\n        (bool sent, ) = _owner.call{value: amount}('');\\r\\n        if (!sent) {\\r\\n            revert withdraw_FailedToSendEther();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////   \\r\\n                            View / Pure Functions\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function getPrice() public pure returns (uint256) {\\r\\n        return PRICE;\\r\\n    }\\r\\n\\r\\n    function getPausedState() public view returns (bool) {\\r\\n        return s_paused;\\r\\n    }\\r\\n\\r\\n    function getMaxTokenIds() public pure returns (uint256) {\\r\\n        return MAXTOKENIDS;\\r\\n    }\\r\\n\\r\\n    function getTokenIds() public view returns (uint256) {\\r\\n        return s_tokenIds;\\r\\n    }\\r\\n\\r\\n    function getpresaleState() public view returns (bool) {\\r\\n        return s_presaleStarted;\\r\\n    }\\r\\n\\r\\n    function getpresaleEnded() public view returns (uint256) {\\r\\n        return s_presaleEnded;\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view onlyOwner returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getBaseURI() public view returns (string memory) {\\r\\n        return s_baseToknURI;\\r\\n    }\\r\\n}\\r\\n\\r\\n// ---------------------------------------------------------------\\r\\n// Contract NFTCollection deployed to: 0x5c416F3b3A312355436797602641429cfb38861c\\r\\n// Contract NFTCollection deployed to: 0x52fd72c1c0f8fb100cad6167839b2146550622CA - T\\r\\n// ---------------------------------------------------------------\\r\\n\\r\\n// Successfully verified contract NFTCollection on Etherscan.\\r\\n// https://goerli.etherscan.io/address/0x5b96E3f80C7adedcf915250Aa0084114E2C0D8b0#code\\r\\n\",\"keccak256\":\"0xd4b4e6dedb97a6a58e1a605a8e8b2a747041456d9911f62876cc75c3056dfd48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620040ca380380620040ca8339818101604052810190620000379190620004d9565b6040518060400160405280600b81526020017f43727970746f20446576730000000000000000000000000000000000000000008152506040518060400160405280600281526020017f43440000000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000227565b508060019080519060200190620000d492919062000227565b505050620000f7620000eb6200015960201b60201c565b6200016160201b60201c565b81600b90805190602001906200010f92919062000227565b5080600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620005a4565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000235906200056e565b90600052602060002090601f016020900481019282620002595760008555620002a5565b82601f106200027457805160ff1916838001178555620002a5565b82800160010185558215620002a5579182015b82811115620002a457825182559160200191906001019062000287565b5b509050620002b49190620002b8565b5090565b5b80821115620002d3576000816000905550600101620002b9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200034082620002f5565b810181811067ffffffffffffffff8211171562000362576200036162000306565b5b80604052505050565b600062000377620002d7565b905062000385828262000335565b919050565b600067ffffffffffffffff821115620003a857620003a762000306565b5b620003b382620002f5565b9050602081019050919050565b60005b83811015620003e0578082015181840152602081019050620003c3565b83811115620003f0576000848401525b50505050565b60006200040d62000407846200038a565b6200036b565b9050828152602081018484840111156200042c576200042b620002f0565b5b62000439848285620003c0565b509392505050565b600082601f830112620004595762000458620002eb565b5b81516200046b848260208601620003f6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004a18262000474565b9050919050565b620004b38162000494565b8114620004bf57600080fd5b50565b600081519050620004d381620004a8565b92915050565b60008060408385031215620004f357620004f2620002e1565b5b600083015167ffffffffffffffff811115620005145762000513620002e6565b5b620005228582860162000441565b92505060206200053585828601620004c2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200058757607f821691505b602082108114156200059e576200059d6200053f565b5b50919050565b613b1680620005b46000396000f3fe6080604052600436106101fd5760003560e01c80636352211e1161010d57806398d5fdca116100a0578063c87b56dd1161006f578063c87b56dd146106c9578063da87be9714610706578063e96e61a81461072f578063e985e9c51461075a578063f2fde38b1461079757610204565b806398d5fdca14610621578063a22cb4651461064c578063b88d4fde14610675578063c2d9f3fb1461069e57610204565b8063714c5398116100dc578063714c539814610589578063715018a6146105b45780638da5cb5b146105cb57806395d89b41146105f657610204565b80636352211e146104b957806367f718a9146104f65780636f9fb98a1461052157806370a082311461054c57610204565b806323b872dd116101905780633ccfd60b1161015f5780633ccfd60b1461040757806342842e0e1461041e5780634ed79216146104475780634f6ccce71461047257806359533d6c146104af57610204565b806323b872dd1461034b5780632eec87ef146103745780632f745c591461039f57806332407000146103dc57610204565b8063095ea7b3116101cc578063095ea7b3146102c25780631249c58b146102eb57806318160ddd146102f55780631c0de0511461032057610204565b806301ffc9a71461020657806304c98b2b1461024357806306fdde031461025a578063081812fc1461028557610204565b3661020457005b005b34801561021257600080fd5b5061022d60048036038101906102289190612903565b6107c0565b60405161023a919061294b565b60405180910390f35b34801561024f57600080fd5b5061025861083a565b005b34801561026657600080fd5b5061026f610873565b60405161027c91906129ff565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190612a57565b610905565b6040516102b99190612ac5565b60405180910390f35b3480156102ce57600080fd5b506102e960048036038101906102e49190612b0c565b61094b565b005b6102f3610a63565b005b34801561030157600080fd5b5061030a610bac565b6040516103179190612b5b565b60405180910390f35b34801561032c57600080fd5b50610335610bb9565b604051610342919061294b565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d9190612b76565b610bd0565b005b34801561038057600080fd5b50610389610c30565b6040516103969190612b5b565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c19190612b0c565b610c36565b6040516103d39190612b5b565b60405180910390f35b3480156103e857600080fd5b506103f1610cdb565b6040516103fe9190612b5b565b60405180910390f35b34801561041357600080fd5b5061041c610ce4565b005b34801561042a57600080fd5b5061044560048036038101906104409190612b76565b610da5565b005b34801561045357600080fd5b5061045c610dc5565b604051610469919061294b565b60405180910390f35b34801561047e57600080fd5b5061049960048036038101906104949190612a57565b610ddc565b6040516104a69190612b5b565b60405180910390f35b6104b7610e4d565b005b3480156104c557600080fd5b506104e060048036038101906104db9190612a57565b611077565b6040516104ed9190612ac5565b60405180910390f35b34801561050257600080fd5b5061050b611129565b6040516105189190612b5b565b60405180910390f35b34801561052d57600080fd5b50610536611133565b6040516105439190612b5b565b60405180910390f35b34801561055857600080fd5b50610573600480360381019061056e9190612bc9565b611143565b6040516105809190612b5b565b60405180910390f35b34801561059557600080fd5b5061059e6111fb565b6040516105ab91906129ff565b60405180910390f35b3480156105c057600080fd5b506105c961128d565b005b3480156105d757600080fd5b506105e06112a1565b6040516105ed9190612ac5565b60405180910390f35b34801561060257600080fd5b5061060b6112cb565b60405161061891906129ff565b60405180910390f35b34801561062d57600080fd5b5061063661135d565b6040516106439190612b5b565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612c22565b61136c565b005b34801561068157600080fd5b5061069c60048036038101906106979190612d97565b611382565b005b3480156106aa57600080fd5b506106b36113e4565b6040516106c0919061294b565b60405180910390f35b3480156106d557600080fd5b506106f060048036038101906106eb9190612a57565b6113f7565b6040516106fd91906129ff565b60405180910390f35b34801561071257600080fd5b5061072d60048036038101906107289190612e1a565b61145f565b005b34801561073b57600080fd5b50610744611484565b6040516107519190612b5b565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c9190612e47565b61148e565b60405161078e919061294b565b60405180910390f35b3480156107a357600080fd5b506107be60048036038101906107b99190612bc9565b611522565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108335750610832826115a6565b5b9050919050565b610842611688565b6001600e60146101000a81548160ff02191690831515021790555061012c4261086b9190612eb6565b600f81905550565b60606000805461088290612f3b565b80601f01602080910402602001604051908101604052809291908181526020018280546108ae90612f3b565b80156108fb5780601f106108d0576101008083540402835291602001916108fb565b820191906000526020600020905b8154815290600101906020018083116108de57829003601f168201915b5050505050905090565b600061091082611706565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061095682611077565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90612fdf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109e6611751565b73ffffffffffffffffffffffffffffffffffffffff161480610a155750610a1481610a0f611751565b61148e565b5b610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90613071565b60405180910390fd5b610a5e8383611759565b505050565b600c60009054906101000a900460ff1615610ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaa906130dd565b60405180910390fd5b600e60149054906101000a900460ff161580610ad05750600f5442105b15610b07576040517fdc3aa63500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014600d5410610b43576040517fd149372200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc10000341015610b84576040517f0d1f030900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600d6000828254610b979190612eb6565b92505081905550610baa33600d54611812565b565b6000600880549050905090565b6000600c60009054906101000a900460ff16905090565b610be1610bdb611751565b82611830565b610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c179061316f565b60405180910390fd5b610c2b8383836118c5565b505050565b600f5481565b6000610c4183611143565b8210610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990613201565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60006014905090565b610cec611688565b6000610cf66112a1565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610d2390613252565b60006040518083038185875af1925050503d8060008114610d60576040519150601f19603f3d011682016040523d82523d6000602084013e610d65565b606091505b5050905080610da0576040517f8ba7066700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b610dc083838360405180602001604052806000815250611382565b505050565b6000600e60149054906101000a900460ff16905090565b6000610de6610bac565b8210610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e906132d9565b60405180910390fd5b60088281548110610e3b57610e3a6132f9565b5b90600052602060002001549050919050565b600c60009054906101000a900460ff1615610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e94906130dd565b60405180910390fd5b600e60149054906101000a900460ff161580610eba5750600f5442115b15610ef1576040517f0fa8d9ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f42ab156336040518263ffffffff1660e01b8152600401610f4c9190612ac5565b60206040518083038186803b158015610f6457600080fd5b505afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c919061333d565b610fd2576040517fd4676fc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014600d541061100e576040517fc73ddefc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc1000034101561104f576040517f20a519a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600d60008282546110629190612eb6565b9250508190555061107533600d54611812565b565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611120576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611117906133b6565b60405180910390fd5b80915050919050565b6000600d54905090565b600061113d611688565b47905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab90613448565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600b805461120a90612f3b565b80601f016020809104026020016040519081016040528092919081815260200182805461123690612f3b565b80156112835780601f1061125857610100808354040283529160200191611283565b820191906000526020600020905b81548152906001019060200180831161126657829003601f168201915b5050505050905090565b611295611688565b61129f6000611b2c565b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546112da90612f3b565b80601f016020809104026020016040519081016040528092919081815260200182805461130690612f3b565b80156113535780601f1061132857610100808354040283529160200191611353565b820191906000526020600020905b81548152906001019060200180831161133657829003601f168201915b5050505050905090565b6000662386f26fc10000905090565b61137e611377611751565b8383611bf2565b5050565b61139361138d611751565b83611830565b6113d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c99061316f565b60405180910390fd5b6113de84848484611d5f565b50505050565b600e60149054906101000a900460ff1681565b606061140282611706565b600061140c611dbb565b9050600081511161142c5760405180602001604052806000815250611457565b8061143684611e4d565b6040516020016114479291906134a4565b6040516020818303038152906040525b915050919050565b611467611688565b80600c60006101000a81548160ff02191690831515021790555050565b6000600f54905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61152a611688565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561159a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115919061353a565b60405180910390fd5b6115a381611b2c565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061167157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611681575061168082611fae565b5b9050919050565b611690611751565b73ffffffffffffffffffffffffffffffffffffffff166116ae6112a1565b73ffffffffffffffffffffffffffffffffffffffff1614611704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fb906135a6565b60405180910390fd5b565b61170f81612018565b61174e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611745906133b6565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166117cc83611077565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61182c828260405180602001604052806000815250612084565b5050565b60008061183c83611077565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187e575061187d818561148e565b5b806118bc57508373ffffffffffffffffffffffffffffffffffffffff166118a484610905565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118e582611077565b73ffffffffffffffffffffffffffffffffffffffff161461193b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193290613638565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a2906136ca565b60405180910390fd5b6119b68383836120df565b6119c1600082611759565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a1191906136ea565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a689190612eb6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b278383836121f3565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c589061376a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d52919061294b565b60405180910390a3505050565b611d6a8484846118c5565b611d76848484846121f8565b611db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dac906137fc565b60405180910390fd5b50505050565b6060600b8054611dca90612f3b565b80601f0160208091040260200160405190810160405280929190818152602001828054611df690612f3b565b8015611e435780601f10611e1857610100808354040283529160200191611e43565b820191906000526020600020905b815481529060010190602001808311611e2657829003601f168201915b5050505050905090565b60606000821415611e95576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611fa9565b600082905060005b60008214611ec7578080611eb09061381c565b915050600a82611ec09190613894565b9150611e9d565b60008167ffffffffffffffff811115611ee357611ee2612c6c565b5b6040519080825280601f01601f191660200182016040528015611f155781602001600182028036833780820191505090505b5090505b60008514611fa257600182611f2e91906136ea565b9150600a85611f3d91906138c5565b6030611f499190612eb6565b60f81b818381518110611f5f57611f5e6132f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f9b9190613894565b9450611f19565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61208e838361238f565b61209b60008484846121f8565b6120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906137fc565b60405180910390fd5b505050565b6120ea838383612569565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561212d576121288161256e565b61216c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461216b5761216a83826125b7565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121af576121aa81612724565b6121ee565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121ed576121ec82826127f5565b5b5b505050565b505050565b60006122198473ffffffffffffffffffffffffffffffffffffffff16612874565b15612382578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612242611751565b8786866040518563ffffffff1660e01b8152600401612264949392919061394b565b602060405180830381600087803b15801561227e57600080fd5b505af19250505080156122af57506040513d601f19601f820116820180604052508101906122ac91906139ac565b60015b612332573d80600081146122df576040519150601f19603f3d011682016040523d82523d6000602084013e6122e4565b606091505b5060008151141561232a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612321906137fc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612387565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f690613a25565b60405180910390fd5b61240881612018565b15612448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243f90613a91565b60405180910390fd5b612454600083836120df565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124a49190612eb6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612565600083836121f3565b5050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016125c484611143565b6125ce91906136ea565b90506000600760008481526020019081526020016000205490508181146126b3576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061273891906136ea565b9050600060096000848152602001908152602001600020549050600060088381548110612768576127676132f9565b5b90600052602060002001549050806008838154811061278a576127896132f9565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806127d9576127d8613ab1565b5b6001900381819060005260206000200160009055905550505050565b600061280083611143565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128e0816128ab565b81146128eb57600080fd5b50565b6000813590506128fd816128d7565b92915050565b600060208284031215612919576129186128a1565b5b6000612927848285016128ee565b91505092915050565b60008115159050919050565b61294581612930565b82525050565b6000602082019050612960600083018461293c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129a0578082015181840152602081019050612985565b838111156129af576000848401525b50505050565b6000601f19601f8301169050919050565b60006129d182612966565b6129db8185612971565b93506129eb818560208601612982565b6129f4816129b5565b840191505092915050565b60006020820190508181036000830152612a1981846129c6565b905092915050565b6000819050919050565b612a3481612a21565b8114612a3f57600080fd5b50565b600081359050612a5181612a2b565b92915050565b600060208284031215612a6d57612a6c6128a1565b5b6000612a7b84828501612a42565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612aaf82612a84565b9050919050565b612abf81612aa4565b82525050565b6000602082019050612ada6000830184612ab6565b92915050565b612ae981612aa4565b8114612af457600080fd5b50565b600081359050612b0681612ae0565b92915050565b60008060408385031215612b2357612b226128a1565b5b6000612b3185828601612af7565b9250506020612b4285828601612a42565b9150509250929050565b612b5581612a21565b82525050565b6000602082019050612b706000830184612b4c565b92915050565b600080600060608486031215612b8f57612b8e6128a1565b5b6000612b9d86828701612af7565b9350506020612bae86828701612af7565b9250506040612bbf86828701612a42565b9150509250925092565b600060208284031215612bdf57612bde6128a1565b5b6000612bed84828501612af7565b91505092915050565b612bff81612930565b8114612c0a57600080fd5b50565b600081359050612c1c81612bf6565b92915050565b60008060408385031215612c3957612c386128a1565b5b6000612c4785828601612af7565b9250506020612c5885828601612c0d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ca4826129b5565b810181811067ffffffffffffffff82111715612cc357612cc2612c6c565b5b80604052505050565b6000612cd6612897565b9050612ce28282612c9b565b919050565b600067ffffffffffffffff821115612d0257612d01612c6c565b5b612d0b826129b5565b9050602081019050919050565b82818337600083830152505050565b6000612d3a612d3584612ce7565b612ccc565b905082815260208101848484011115612d5657612d55612c67565b5b612d61848285612d18565b509392505050565b600082601f830112612d7e57612d7d612c62565b5b8135612d8e848260208601612d27565b91505092915050565b60008060008060808587031215612db157612db06128a1565b5b6000612dbf87828801612af7565b9450506020612dd087828801612af7565b9350506040612de187828801612a42565b925050606085013567ffffffffffffffff811115612e0257612e016128a6565b5b612e0e87828801612d69565b91505092959194509250565b600060208284031215612e3057612e2f6128a1565b5b6000612e3e84828501612c0d565b91505092915050565b60008060408385031215612e5e57612e5d6128a1565b5b6000612e6c85828601612af7565b9250506020612e7d85828601612af7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ec182612a21565b9150612ecc83612a21565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f0157612f00612e87565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f5357607f821691505b60208210811415612f6757612f66612f0c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fc9602183612971565b9150612fd482612f6d565b604082019050919050565b60006020820190508181036000830152612ff881612fbc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061305b603e83612971565b915061306682612fff565b604082019050919050565b6000602082019050818103600083015261308a8161304e565b9050919050565b7f436f6e74726163742063757272656e746c792070617573656400000000000000600082015250565b60006130c7601983612971565b91506130d282613091565b602082019050919050565b600060208201905081810360008301526130f6816130ba565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613159602e83612971565b9150613164826130fd565b604082019050919050565b600060208201905081810360008301526131888161314c565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006131eb602b83612971565b91506131f68261318f565b604082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b600081905092915050565b50565b600061323c600083613221565b91506132478261322c565b600082019050919050565b600061325d8261322f565b9150819050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b60006132c3602c83612971565b91506132ce82613267565b604082019050919050565b600060208201905081810360008301526132f2816132b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061333781612bf6565b92915050565b600060208284031215613353576133526128a1565b5b600061336184828501613328565b91505092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006133a0601883612971565b91506133ab8261336a565b602082019050919050565b600060208201905081810360008301526133cf81613393565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613432602983612971565b915061343d826133d6565b604082019050919050565b6000602082019050818103600083015261346181613425565b9050919050565b600081905092915050565b600061347e82612966565b6134888185613468565b9350613498818560208601612982565b80840191505092915050565b60006134b08285613473565b91506134bc8284613473565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613524602683612971565b915061352f826134c8565b604082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613590602083612971565b915061359b8261355a565b602082019050919050565b600060208201905081810360008301526135bf81613583565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613622602583612971565b915061362d826135c6565b604082019050919050565b6000602082019050818103600083015261365181613615565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006136b4602483612971565b91506136bf82613658565b604082019050919050565b600060208201905081810360008301526136e3816136a7565b9050919050565b60006136f582612a21565b915061370083612a21565b92508282101561371357613712612e87565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613754601983612971565b915061375f8261371e565b602082019050919050565b6000602082019050818103600083015261378381613747565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006137e6603283612971565b91506137f18261378a565b604082019050919050565b60006020820190508181036000830152613815816137d9565b9050919050565b600061382782612a21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561385a57613859612e87565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061389f82612a21565b91506138aa83612a21565b9250826138ba576138b9613865565b5b828204905092915050565b60006138d082612a21565b91506138db83612a21565b9250826138eb576138ea613865565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061391d826138f6565b6139278185613901565b9350613937818560208601612982565b613940816129b5565b840191505092915050565b60006080820190506139606000830187612ab6565b61396d6020830186612ab6565b61397a6040830185612b4c565b818103606083015261398c8184613912565b905095945050505050565b6000815190506139a6816128d7565b92915050565b6000602082840312156139c2576139c16128a1565b5b60006139d084828501613997565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613a0f602083612971565b9150613a1a826139d9565b602082019050919050565b60006020820190508181036000830152613a3e81613a02565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a7b601c83612971565b9150613a8682613a45565b602082019050919050565b60006020820190508181036000830152613aaa81613a6e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200952bd95798dadda28942039ce826ef4960bde2931bcae138ea98213fbc6b56a64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c80636352211e1161010d57806398d5fdca116100a0578063c87b56dd1161006f578063c87b56dd146106c9578063da87be9714610706578063e96e61a81461072f578063e985e9c51461075a578063f2fde38b1461079757610204565b806398d5fdca14610621578063a22cb4651461064c578063b88d4fde14610675578063c2d9f3fb1461069e57610204565b8063714c5398116100dc578063714c539814610589578063715018a6146105b45780638da5cb5b146105cb57806395d89b41146105f657610204565b80636352211e146104b957806367f718a9146104f65780636f9fb98a1461052157806370a082311461054c57610204565b806323b872dd116101905780633ccfd60b1161015f5780633ccfd60b1461040757806342842e0e1461041e5780634ed79216146104475780634f6ccce71461047257806359533d6c146104af57610204565b806323b872dd1461034b5780632eec87ef146103745780632f745c591461039f57806332407000146103dc57610204565b8063095ea7b3116101cc578063095ea7b3146102c25780631249c58b146102eb57806318160ddd146102f55780631c0de0511461032057610204565b806301ffc9a71461020657806304c98b2b1461024357806306fdde031461025a578063081812fc1461028557610204565b3661020457005b005b34801561021257600080fd5b5061022d60048036038101906102289190612903565b6107c0565b60405161023a919061294b565b60405180910390f35b34801561024f57600080fd5b5061025861083a565b005b34801561026657600080fd5b5061026f610873565b60405161027c91906129ff565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190612a57565b610905565b6040516102b99190612ac5565b60405180910390f35b3480156102ce57600080fd5b506102e960048036038101906102e49190612b0c565b61094b565b005b6102f3610a63565b005b34801561030157600080fd5b5061030a610bac565b6040516103179190612b5b565b60405180910390f35b34801561032c57600080fd5b50610335610bb9565b604051610342919061294b565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d9190612b76565b610bd0565b005b34801561038057600080fd5b50610389610c30565b6040516103969190612b5b565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c19190612b0c565b610c36565b6040516103d39190612b5b565b60405180910390f35b3480156103e857600080fd5b506103f1610cdb565b6040516103fe9190612b5b565b60405180910390f35b34801561041357600080fd5b5061041c610ce4565b005b34801561042a57600080fd5b5061044560048036038101906104409190612b76565b610da5565b005b34801561045357600080fd5b5061045c610dc5565b604051610469919061294b565b60405180910390f35b34801561047e57600080fd5b5061049960048036038101906104949190612a57565b610ddc565b6040516104a69190612b5b565b60405180910390f35b6104b7610e4d565b005b3480156104c557600080fd5b506104e060048036038101906104db9190612a57565b611077565b6040516104ed9190612ac5565b60405180910390f35b34801561050257600080fd5b5061050b611129565b6040516105189190612b5b565b60405180910390f35b34801561052d57600080fd5b50610536611133565b6040516105439190612b5b565b60405180910390f35b34801561055857600080fd5b50610573600480360381019061056e9190612bc9565b611143565b6040516105809190612b5b565b60405180910390f35b34801561059557600080fd5b5061059e6111fb565b6040516105ab91906129ff565b60405180910390f35b3480156105c057600080fd5b506105c961128d565b005b3480156105d757600080fd5b506105e06112a1565b6040516105ed9190612ac5565b60405180910390f35b34801561060257600080fd5b5061060b6112cb565b60405161061891906129ff565b60405180910390f35b34801561062d57600080fd5b5061063661135d565b6040516106439190612b5b565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190612c22565b61136c565b005b34801561068157600080fd5b5061069c60048036038101906106979190612d97565b611382565b005b3480156106aa57600080fd5b506106b36113e4565b6040516106c0919061294b565b60405180910390f35b3480156106d557600080fd5b506106f060048036038101906106eb9190612a57565b6113f7565b6040516106fd91906129ff565b60405180910390f35b34801561071257600080fd5b5061072d60048036038101906107289190612e1a565b61145f565b005b34801561073b57600080fd5b50610744611484565b6040516107519190612b5b565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c9190612e47565b61148e565b60405161078e919061294b565b60405180910390f35b3480156107a357600080fd5b506107be60048036038101906107b99190612bc9565b611522565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108335750610832826115a6565b5b9050919050565b610842611688565b6001600e60146101000a81548160ff02191690831515021790555061012c4261086b9190612eb6565b600f81905550565b60606000805461088290612f3b565b80601f01602080910402602001604051908101604052809291908181526020018280546108ae90612f3b565b80156108fb5780601f106108d0576101008083540402835291602001916108fb565b820191906000526020600020905b8154815290600101906020018083116108de57829003601f168201915b5050505050905090565b600061091082611706565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061095682611077565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90612fdf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109e6611751565b73ffffffffffffffffffffffffffffffffffffffff161480610a155750610a1481610a0f611751565b61148e565b5b610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90613071565b60405180910390fd5b610a5e8383611759565b505050565b600c60009054906101000a900460ff1615610ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaa906130dd565b60405180910390fd5b600e60149054906101000a900460ff161580610ad05750600f5442105b15610b07576040517fdc3aa63500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014600d5410610b43576040517fd149372200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc10000341015610b84576040517f0d1f030900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600d6000828254610b979190612eb6565b92505081905550610baa33600d54611812565b565b6000600880549050905090565b6000600c60009054906101000a900460ff16905090565b610be1610bdb611751565b82611830565b610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c179061316f565b60405180910390fd5b610c2b8383836118c5565b505050565b600f5481565b6000610c4183611143565b8210610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990613201565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60006014905090565b610cec611688565b6000610cf66112a1565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610d2390613252565b60006040518083038185875af1925050503d8060008114610d60576040519150601f19603f3d011682016040523d82523d6000602084013e610d65565b606091505b5050905080610da0576040517f8ba7066700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b610dc083838360405180602001604052806000815250611382565b505050565b6000600e60149054906101000a900460ff16905090565b6000610de6610bac565b8210610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e906132d9565b60405180910390fd5b60088281548110610e3b57610e3a6132f9565b5b90600052602060002001549050919050565b600c60009054906101000a900460ff1615610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e94906130dd565b60405180910390fd5b600e60149054906101000a900460ff161580610eba5750600f5442115b15610ef1576040517f0fa8d9ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f42ab156336040518263ffffffff1660e01b8152600401610f4c9190612ac5565b60206040518083038186803b158015610f6457600080fd5b505afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c919061333d565b610fd2576040517fd4676fc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6014600d541061100e576040517fc73ddefc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b662386f26fc1000034101561104f576040517f20a519a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600d60008282546110629190612eb6565b9250508190555061107533600d54611812565b565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611120576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611117906133b6565b60405180910390fd5b80915050919050565b6000600d54905090565b600061113d611688565b47905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab90613448565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600b805461120a90612f3b565b80601f016020809104026020016040519081016040528092919081815260200182805461123690612f3b565b80156112835780601f1061125857610100808354040283529160200191611283565b820191906000526020600020905b81548152906001019060200180831161126657829003601f168201915b5050505050905090565b611295611688565b61129f6000611b2c565b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546112da90612f3b565b80601f016020809104026020016040519081016040528092919081815260200182805461130690612f3b565b80156113535780601f1061132857610100808354040283529160200191611353565b820191906000526020600020905b81548152906001019060200180831161133657829003601f168201915b5050505050905090565b6000662386f26fc10000905090565b61137e611377611751565b8383611bf2565b5050565b61139361138d611751565b83611830565b6113d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c99061316f565b60405180910390fd5b6113de84848484611d5f565b50505050565b600e60149054906101000a900460ff1681565b606061140282611706565b600061140c611dbb565b9050600081511161142c5760405180602001604052806000815250611457565b8061143684611e4d565b6040516020016114479291906134a4565b6040516020818303038152906040525b915050919050565b611467611688565b80600c60006101000a81548160ff02191690831515021790555050565b6000600f54905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61152a611688565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561159a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115919061353a565b60405180910390fd5b6115a381611b2c565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061167157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611681575061168082611fae565b5b9050919050565b611690611751565b73ffffffffffffffffffffffffffffffffffffffff166116ae6112a1565b73ffffffffffffffffffffffffffffffffffffffff1614611704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fb906135a6565b60405180910390fd5b565b61170f81612018565b61174e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611745906133b6565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166117cc83611077565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61182c828260405180602001604052806000815250612084565b5050565b60008061183c83611077565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187e575061187d818561148e565b5b806118bc57508373ffffffffffffffffffffffffffffffffffffffff166118a484610905565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118e582611077565b73ffffffffffffffffffffffffffffffffffffffff161461193b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193290613638565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a2906136ca565b60405180910390fd5b6119b68383836120df565b6119c1600082611759565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a1191906136ea565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a689190612eb6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b278383836121f3565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c589061376a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d52919061294b565b60405180910390a3505050565b611d6a8484846118c5565b611d76848484846121f8565b611db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dac906137fc565b60405180910390fd5b50505050565b6060600b8054611dca90612f3b565b80601f0160208091040260200160405190810160405280929190818152602001828054611df690612f3b565b8015611e435780601f10611e1857610100808354040283529160200191611e43565b820191906000526020600020905b815481529060010190602001808311611e2657829003601f168201915b5050505050905090565b60606000821415611e95576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611fa9565b600082905060005b60008214611ec7578080611eb09061381c565b915050600a82611ec09190613894565b9150611e9d565b60008167ffffffffffffffff811115611ee357611ee2612c6c565b5b6040519080825280601f01601f191660200182016040528015611f155781602001600182028036833780820191505090505b5090505b60008514611fa257600182611f2e91906136ea565b9150600a85611f3d91906138c5565b6030611f499190612eb6565b60f81b818381518110611f5f57611f5e6132f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f9b9190613894565b9450611f19565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61208e838361238f565b61209b60008484846121f8565b6120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906137fc565b60405180910390fd5b505050565b6120ea838383612569565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561212d576121288161256e565b61216c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461216b5761216a83826125b7565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121af576121aa81612724565b6121ee565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121ed576121ec82826127f5565b5b5b505050565b505050565b60006122198473ffffffffffffffffffffffffffffffffffffffff16612874565b15612382578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612242611751565b8786866040518563ffffffff1660e01b8152600401612264949392919061394b565b602060405180830381600087803b15801561227e57600080fd5b505af19250505080156122af57506040513d601f19601f820116820180604052508101906122ac91906139ac565b60015b612332573d80600081146122df576040519150601f19603f3d011682016040523d82523d6000602084013e6122e4565b606091505b5060008151141561232a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612321906137fc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612387565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f690613a25565b60405180910390fd5b61240881612018565b15612448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243f90613a91565b60405180910390fd5b612454600083836120df565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124a49190612eb6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612565600083836121f3565b5050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016125c484611143565b6125ce91906136ea565b90506000600760008481526020019081526020016000205490508181146126b3576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061273891906136ea565b9050600060096000848152602001908152602001600020549050600060088381548110612768576127676132f9565b5b90600052602060002001549050806008838154811061278a576127896132f9565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806127d9576127d8613ab1565b5b6001900381819060005260206000200160009055905550505050565b600061280083611143565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128e0816128ab565b81146128eb57600080fd5b50565b6000813590506128fd816128d7565b92915050565b600060208284031215612919576129186128a1565b5b6000612927848285016128ee565b91505092915050565b60008115159050919050565b61294581612930565b82525050565b6000602082019050612960600083018461293c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129a0578082015181840152602081019050612985565b838111156129af576000848401525b50505050565b6000601f19601f8301169050919050565b60006129d182612966565b6129db8185612971565b93506129eb818560208601612982565b6129f4816129b5565b840191505092915050565b60006020820190508181036000830152612a1981846129c6565b905092915050565b6000819050919050565b612a3481612a21565b8114612a3f57600080fd5b50565b600081359050612a5181612a2b565b92915050565b600060208284031215612a6d57612a6c6128a1565b5b6000612a7b84828501612a42565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612aaf82612a84565b9050919050565b612abf81612aa4565b82525050565b6000602082019050612ada6000830184612ab6565b92915050565b612ae981612aa4565b8114612af457600080fd5b50565b600081359050612b0681612ae0565b92915050565b60008060408385031215612b2357612b226128a1565b5b6000612b3185828601612af7565b9250506020612b4285828601612a42565b9150509250929050565b612b5581612a21565b82525050565b6000602082019050612b706000830184612b4c565b92915050565b600080600060608486031215612b8f57612b8e6128a1565b5b6000612b9d86828701612af7565b9350506020612bae86828701612af7565b9250506040612bbf86828701612a42565b9150509250925092565b600060208284031215612bdf57612bde6128a1565b5b6000612bed84828501612af7565b91505092915050565b612bff81612930565b8114612c0a57600080fd5b50565b600081359050612c1c81612bf6565b92915050565b60008060408385031215612c3957612c386128a1565b5b6000612c4785828601612af7565b9250506020612c5885828601612c0d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ca4826129b5565b810181811067ffffffffffffffff82111715612cc357612cc2612c6c565b5b80604052505050565b6000612cd6612897565b9050612ce28282612c9b565b919050565b600067ffffffffffffffff821115612d0257612d01612c6c565b5b612d0b826129b5565b9050602081019050919050565b82818337600083830152505050565b6000612d3a612d3584612ce7565b612ccc565b905082815260208101848484011115612d5657612d55612c67565b5b612d61848285612d18565b509392505050565b600082601f830112612d7e57612d7d612c62565b5b8135612d8e848260208601612d27565b91505092915050565b60008060008060808587031215612db157612db06128a1565b5b6000612dbf87828801612af7565b9450506020612dd087828801612af7565b9350506040612de187828801612a42565b925050606085013567ffffffffffffffff811115612e0257612e016128a6565b5b612e0e87828801612d69565b91505092959194509250565b600060208284031215612e3057612e2f6128a1565b5b6000612e3e84828501612c0d565b91505092915050565b60008060408385031215612e5e57612e5d6128a1565b5b6000612e6c85828601612af7565b9250506020612e7d85828601612af7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ec182612a21565b9150612ecc83612a21565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f0157612f00612e87565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f5357607f821691505b60208210811415612f6757612f66612f0c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fc9602183612971565b9150612fd482612f6d565b604082019050919050565b60006020820190508181036000830152612ff881612fbc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061305b603e83612971565b915061306682612fff565b604082019050919050565b6000602082019050818103600083015261308a8161304e565b9050919050565b7f436f6e74726163742063757272656e746c792070617573656400000000000000600082015250565b60006130c7601983612971565b91506130d282613091565b602082019050919050565b600060208201905081810360008301526130f6816130ba565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613159602e83612971565b9150613164826130fd565b604082019050919050565b600060208201905081810360008301526131888161314c565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006131eb602b83612971565b91506131f68261318f565b604082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b600081905092915050565b50565b600061323c600083613221565b91506132478261322c565b600082019050919050565b600061325d8261322f565b9150819050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b60006132c3602c83612971565b91506132ce82613267565b604082019050919050565b600060208201905081810360008301526132f2816132b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061333781612bf6565b92915050565b600060208284031215613353576133526128a1565b5b600061336184828501613328565b91505092915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006133a0601883612971565b91506133ab8261336a565b602082019050919050565b600060208201905081810360008301526133cf81613393565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613432602983612971565b915061343d826133d6565b604082019050919050565b6000602082019050818103600083015261346181613425565b9050919050565b600081905092915050565b600061347e82612966565b6134888185613468565b9350613498818560208601612982565b80840191505092915050565b60006134b08285613473565b91506134bc8284613473565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613524602683612971565b915061352f826134c8565b604082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613590602083612971565b915061359b8261355a565b602082019050919050565b600060208201905081810360008301526135bf81613583565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613622602583612971565b915061362d826135c6565b604082019050919050565b6000602082019050818103600083015261365181613615565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006136b4602483612971565b91506136bf82613658565b604082019050919050565b600060208201905081810360008301526136e3816136a7565b9050919050565b60006136f582612a21565b915061370083612a21565b92508282101561371357613712612e87565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613754601983612971565b915061375f8261371e565b602082019050919050565b6000602082019050818103600083015261378381613747565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006137e6603283612971565b91506137f18261378a565b604082019050919050565b60006020820190508181036000830152613815816137d9565b9050919050565b600061382782612a21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561385a57613859612e87565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061389f82612a21565b91506138aa83612a21565b9250826138ba576138b9613865565b5b828204905092915050565b60006138d082612a21565b91506138db83612a21565b9250826138eb576138ea613865565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061391d826138f6565b6139278185613901565b9350613937818560208601612982565b613940816129b5565b840191505092915050565b60006080820190506139606000830187612ab6565b61396d6020830186612ab6565b61397a6040830185612b4c565b818103606083015261398c8184613912565b905095945050505050565b6000815190506139a6816128d7565b92915050565b6000602082840312156139c2576139c16128a1565b5b60006139d084828501613997565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613a0f602083612971565b9150613a1a826139d9565b602082019050919050565b60006020820190508181036000830152613a3e81613a02565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a7b601c83612971565b9150613a8682613a45565b602082019050919050565b60006020820190508181036000830152613aaa81613a6e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200952bd95798dadda28942039ce826ef4960bde2931bcae138ea98213fbc6b56a64736f6c63430008090033",
  "devdoc": {
    "author": "Kehinde A.",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "ERC721 constructor takes in a `name` and a `symbol` to the token collection. name in our case is `Crypto Devs` and symbol is `CD`. Constructor for Crypto Devs takes in the baseURI to set _baseTokenURI for the collection. It also initializes an instance of whitelist interface."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint()": {
        "details": "mint allows a user to mint 1 NFT per transaction after the presale has ended."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "presaleMint()": {
        "details": "presaleMint allows a user to mint one NFT per transaction during the presale."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setPasued(bool)": {
        "details": "setPaused makes the contract paused or unpaused"
      },
      "startPresale()": {
        "details": "startPresale starts a presale for the whitelisted addresses"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "withdraw sends all the ether in the contract to the owner of the contract"
      }
    },
    "stateVariables": {
      "s_baseToknURI": {
        "details": "_baseTokenURI for computing {tokenURI}. If set, the resulting URI for each token will be the concatenation of the `baseURI` and the `tokenId`."
      }
    },
    "title": "NFT collection",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a 20 \"Crypto Dev\" NFT's and each one of them will be unique. User's will beable to mint only 1 NFT with one transaction. Whitelisted users, should have a 5 min presale period before the actual sale where they are guaranteed 1 NFT per transaction.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1128,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1132,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1135,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1139,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2202,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "s_baseToknURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2207,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "s_paused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2212,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "s_tokenIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2215,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "whitelist",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IWhitelist)2172"
      },
      {
        "astId": 2217,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "s_presaleStarted",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2219,
        "contract": "contracts/NFTCollection.sol:NFTCollection",
        "label": "s_presaleEnded",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWhitelist)2172": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}