{
  "language": "Solidity",
  "sources": {
    "contracts/CryptoDevDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\n/*//////////////////////////////////////////////////////////////   \n                            Imports\n//////////////////////////////////////////////////////////////*/\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './INFTMarketplace.sol';\nimport './INFTCollection.sol';\n\n/*//////////////////////////////////////////////////////////////   \n                            Custom Errors\n//////////////////////////////////////////////////////////////*/\nerror nftHolderOnly_NotADAOMember();\nerror createProposal_NFTNotForSale();\nerror activeProposalOnly_DeadlineExceeded();\nerror voteOnProposal_AlreadyVoted();\nerror inactiveProposalOnly_DeadlineNotExceeded();\nerror inactiveProposalOnly_ProposalAlreadyExecuted();\nerror excuteProposal_NotEnoughFunds();\nerror withdraw_FailedToSendEther();\n\n/// @title Crypto Dev DAO\n/// @author Kehinde A.\n/// @notice A Crypto Dev DAO. Anyone with a CryptoDevs NFT can create a proposal to purchase a different NFT from an NFT marketplace. Everyone with a CryptoDevs NFT can vote for or against the active proposals. Each NFT counts as one vote for each proposal. If majority of the voters vote for the proposal by the deadline, the NFT purchase is automatically executed.\ncontract CryptoDevDAO is Ownable {\n    /*//////////////////////////////////////////////////////////////   \n                            State Variables\n    //////////////////////////////////////////////////////////////*/\n    //possible options for a vote\n    enum Vote {\n        YAY, // YAY = 0\n        NAY // NAY = 1\n    }\n\n    /// @notice Create a struct named Proposal containing all relevant information\n    struct Proposal {\n        // nftTokenId - the tokenID of the NFT to purchase from FakeNFTMarketplace if the proposal passes\n        uint256 nftTokenId;\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\n        uint256 deadline;\n        // yayVotes - number of yay votes for this proposal\n        uint256 yayVotes;\n        // nayVotes - number of nay votes for this proposal\n        uint256 nayVotes;\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\n        bool executed;\n        // voters - a mapping of CryptoDevsNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not\n        mapping(uint256 => bool) voters;\n    }\n\n    // Create a mapping of ID to Proposal\n    mapping(uint256 => Proposal) public proposals; //Private ??\n\n    // Number of proposals that have been created\n    uint256 private numProposals;\n\n    //Initializing NFTmarketplace contract\n    INFTMarketplace nftMarketplace;\n\n    //Initializing NFTmarketplace contract\n    INFTCollection cryptoDevsNFT;\n\n    /*//////////////////////////////////////////////////////////////   \n                            Modifier\n    //////////////////////////////////////////////////////////////*/\n    // Create a modifier which only allows a function to be\n    // called by someone who owns at least 1 CryptoDevsNFT\n    modifier nftHolderOnly() {\n        if (cryptoDevsNFT.balanceOf(msg.sender) <= 0) {\n            revert nftHolderOnly_NotADAOMember();\n        }\n        _;\n    }\n\n    modifier activeProposalOnly(uint256 proposalIndex) {\n        if (proposals[proposalIndex].deadline <= block.timestamp) {\n            revert activeProposalOnly_DeadlineExceeded();\n        }\n        _;\n    }\n\n    // Create a modifier which only allows a function to be\n    // called if the given proposals' deadline HAS been exceeded\n    // and if the proposal has not yet been executed\n    modifier inactiveProposalOnly(uint256 proposalIndex) {\n        if (proposals[proposalIndex].deadline > block.timestamp) {\n            revert inactiveProposalOnly_DeadlineNotExceeded();\n        }\n        if (proposals[proposalIndex].executed != false) {\n            revert inactiveProposalOnly_ProposalAlreadyExecuted();\n        }\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                            Constructor Functions\n    //////////////////////////////////////////////////////////////*/\n\n    // Create a payable constructor which initializes the contract\n    // instances for FakeNFTMarketplace and CryptoDevsNFT\n    constructor(address _nftMarketplace, address _cryptoDevsNFT) payable {\n        nftMarketplace = INFTMarketplace(_nftMarketplace);\n        cryptoDevsNFT = INFTCollection(_cryptoDevsNFT);\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                            Functions\n    //////////////////////////////////////////////////////////////*/\n    /// @dev createProposal allows a CryptoDevsNFT holder to create a new proposal in the DAO\n    /// @param _nftTokenId - the tokenID of the NFT to be purchased from FakeNFTMarketplace if this proposal passes\n    /// @return Returns the proposal index for the newly created proposal\n    function createProposal(uint256 _nftTokenId)\n        external\n        nftHolderOnly\n        returns (uint256)\n    {\n        if (!(nftMarketplace.available(_nftTokenId))) {\n            // Check to see if desired NFT is avaiable\n            revert createProposal_NFTNotForSale();\n        }\n        Proposal storage proposal = proposals[numProposals];\n        proposal.nftTokenId = _nftTokenId;\n\n        //Set the proposal's voting deadline to be (current time + 5 minutes)\n        proposal.deadline = block.timestamp + 5 minutes;\n\n        numProposals++;\n\n        return numProposals - 1;\n    }\n\n    /// @dev voteOnProposal allows a CryptoDevsNFT holder to cast their vote on an active proposal\n    /// @param proposalIndex - the index of the proposal to vote on in the proposals array\n    /// @param vote - the type of vote they want to cast\n    function voteOnProposal(uint256 proposalIndex, Vote vote)\n        external\n        nftHolderOnly\n        activeProposalOnly(proposalIndex)\n    {\n        Proposal storage proposal = proposals[proposalIndex];\n\n        uint256 voterNFTBalance = cryptoDevsNFT.balanceOf(msg.sender);\n        uint256 numVotes;\n\n        // Calculate how many NFTs are owned by the voter\n        // that haven't already been used for voting on this proposal\n        for (uint256 i; i < voterNFTBalance; ++i) {\n            uint256 tokenId = cryptoDevsNFT.tokenOfOwnerByIndex(msg.sender, i);\n            if (proposal.voters[tokenId] == false) {\n                numVotes++;\n                proposal.voters[tokenId] = true;\n            }\n        }\n\n        if (numVotes <= 0) {\n            revert voteOnProposal_AlreadyVoted();\n        }\n\n        //increments the yayVotes & NayVotes\n        if (vote == Vote.YAY) {\n            proposal.yayVotes += numVotes;\n        } else {\n            proposal.nayVotes += numVotes;\n        }\n    }\n\n    /// @dev executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded\n    /// @param proposalIndex - the index of the proposal to execute in the proposals array\n    function executeProposal(uint256 proposalIndex)\n        external\n        nftHolderOnly\n        inactiveProposalOnly(proposalIndex)\n    {\n        Proposal storage proposal = proposals[proposalIndex];\n\n        // If the proposal has more YAY votes than NAY votes\n        // purchase the NFT from the FakeNFTMarketplace\n        if (proposal.yayVotes > proposal.nayVotes) {\n            uint256 nftPrice = nftMarketplace.getNFTPrice();\n            if (address(this).balance < nftPrice) {\n                revert excuteProposal_NotEnoughFunds();\n            }\n            nftMarketplace.purchase{value: nftPrice}(proposal.nftTokenId);\n        }\n        proposal.executed = true;\n    }\n\n    /// @dev withdrawEther allows the contract owner (deployer) to withdraw the ETH from the contract\n    function withdrawEther() external onlyOwner {\n        uint256 amount = address(this).balance;\n        (bool sent, ) = owner().call{value: amount}('');\n        if (!sent) {\n            revert withdraw_FailedToSendEther();\n        }\n    }\n\n    // The following two functions allow the contract to accept ETH deposits\n    // directly from a wallet without calling a function\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    //Sell function\n\n    /*//////////////////////////////////////////////////////////////   \n                        Getter Functions\n    //////////////////////////////////////////////////////////////*/\n    function getNumProposals() external view returns (uint256) {\n        return numProposals;\n    }\n\n    function getProposalNftTokenId(uint256 _nftTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.nftTokenId;\n    }\n\n    function getProposalDeadline(uint256 _nftTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.deadline;\n    }\n\n    function getProposalYayVotes(uint256 _nftTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.yayVotes;\n    }\n\n    function getProposalNayVotes(uint256 _nftTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.nayVotes;\n    }\n\n    function getProposalExecuted(uint256 _nftTokenId)\n        external\n        view\n        returns (bool)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.executed;\n    }\n\n    function getProposalVoters(uint256 _nftTokenId, uint256 index)\n        external\n        view\n        returns (bool)\n    {\n        Proposal storage proposal = proposals[_nftTokenId];\n        return proposal.voters[index];\n    }\n}\n\n/**\n * deploy script X\n * Check revert logic\n * add params to error\n * Testing\n * Frontend\n * Contract deployed at: 0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\n */\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/INFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\ninterface INFTMarketplace {\r\n    /// @dev getPrice() returns the price of an NFT from the FakeNFTMarketplace\r\n    /// @return Returns the price in Wei for an NFT\r\n    function getNFTPrice() external view returns (uint256);\r\n\r\n    /// @dev available() returns whether or not the given _tokenId has already been purchased\r\n    /// @return Returns a boolean value - true if available, false if not\r\n    function available(uint256 _tokenId) external view returns (bool);\r\n\r\n    /// @dev purchase() purchases an NFT from the FakeNFTMarketplace\r\n    /// @param _tokenId - the fake NFT tokenID to purchase\r\n    function purchase(uint256 _tokenId) external payable;\r\n}\r\n"
    },
    "contracts/INFTCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface INFTCollection {\r\n    /**@dev Returns a token ID owned by \"owner\" at given \"index\" of its token list.\r\n     * Use along with {baslanceOf} to enumerate all of \"owner's\" tokens.\r\n     */\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in \"owner's\" account\r\n     */\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ICO.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/*//////////////////////////////////////////////////////////////   \n                            Imports\n//////////////////////////////////////////////////////////////*/\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './INFTCollection.sol';\n\n/*//////////////////////////////////////////////////////////////   \n                            Custom Errors\n//////////////////////////////////////////////////////////////*/\nerror mint_NotEnoughETHSent();\nerror mint_ExceedsTheMaxTotalSupply();\nerror claim_NoNFTOwned();\nerror claim_TokensAlreadyClaim();\nerror withdraw_FailedToSendETH();\n\n/// @title ICO\n/// @author Kehinde A.\n/// @notice A Crypto Dev Token. Token will be given out for free to all our NFT holders, and will be avaiable for purchase to other people to buy for ETH. There should be a max of 10,000 CD tokens. Every Crypto Dev NFT holder should get 10 tokens for free but they would have to pay the gas fees. The price of one CD at the time of ICO should be 0.001 ether.\ncontract ICO is ERC20, Ownable {\n    /*//////////////////////////////////////////////////////////////   \n                            Variables\n    //////////////////////////////////////////////////////////////*/\n    // Price of one Crypto Dev token\n    uint256 private constant TOKENPRICE = 0.001 ether;\n\n    uint256 private constant TOKENPERNFT = 10;\n\n    // the max total supply is 10000 for Crypto Dev Tokens\n    uint256 private constant MAXTOTALSUPPLY = 10000; //10000 * 10**18\n\n    // CryptoDevsNFT contract instance\n    INFTCollection CryptoDevsNFT;\n\n    // Mapping to keep track of which tokenIds have been claimed\n    mapping(uint256 => bool) private tokenIdsClaimed;\n\n    /*//////////////////////////////////////////////////////////////   \n                        Constructor Function\n    //////////////////////////////////////////////////////////////*/\n    /**\n     * @dev ERC20 constructor takes in a `name` and a `symbol`.\n     * name in our case is `Crypto Devs Token` and symbol is `CD`.\n     * Constructor for ICO initializes an instance of CryptoDevs interface.\n     */\n    constructor(address nftCollectionContract) ERC20('Crypto Dev Token', 'CD') {\n        CryptoDevsNFT = INFTCollection(nftCollectionContract);\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                            Functions\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Mints `amount` number of CryptoDevTokens\n     * Requirements:\n     * - `msg.value` should be equal or greater than the tokenPrice * amount\n     */\n    function mint(uint256 amount) public payable {\n        //the value of ether that should be equal or grater than TOKENPRICE * amount\n        uint256 requiredAmount = TOKENPRICE * amount;\n\n        if (msg.value < requiredAmount) {\n            revert mint_NotEnoughETHSent();\n        }\n\n        // total tokens + amount <= 10000, otherwise revert the transaction\n        uint256 amountWithDecimals = amount * 10 ** 18;\n\n        if ((totalSupply() + amountWithDecimals) > MAXTOTALSUPPLY) {\n            revert mint_ExceedsTheMaxTotalSupply();\n        }\n\n        // call the internal function from Openzeppelin's ERC20 contract\n        _mint(msg.sender, amountWithDecimals);\n    }\n\n    /**\n     * @dev Mints token based on the number of NFT's held by the sender\n     * Requiremnt:\n     * balance of Crypto Dev NFT's owned by the sender should be greater than 0\n     * Token should have not been claimed for all the NFT's owned by the sneder\n     */\n    function claim() public {\n        address sender = msg.sender;\n\n        //Get the number of CryptoDev NFT's held by a given sender address\n        uint256 balance = CryptoDevsNFT.balanceOf(sender);\n\n        //If the balance is zero, revert the transaction\n        if (balance <= 0) {\n            revert claim_NoNFTOwned();\n        }\n\n        //amount keeps track of the number of unclaimed tokenIds\n        uint256 amount = 0;\n\n        //loop over the balance and get the token ID owned by \"sender\" at a given \"index\" of its token list\n        for (uint256 i; i < balance; ++i) {\n            uint256 tokenId = CryptoDevsNFT.tokenOfOwnerByIndex(sender, i);\n\n            //If the tokenId has not been claimed, increase the amount\n            if (!tokenIdsClaimed[tokenId]) {\n                amount += 1;\n                tokenIdsClaimed[tokenId] = true;\n            }\n        }\n        // If all the token Ids have been claimed, revert the transaction;\n        if (amount <= 0) {\n            revert claim_TokensAlreadyClaim();\n        }\n        // call the internal function from Openzeppelin's ERC20 contract\n        // Mint (amount * 10) tokens for each NFT\n        _mint(msg.sender, amount * TOKENPERNFT);\n    }\n\n    /**\n     * @dev withdraws all ETH and token sent to the contract\n     * Requirements:\n     * wallet connected must be owner's address\n     */\n    function withdraw() public onlyOwner {\n        address _owner = owner();\n        uint256 amount = address(this).balance;\n        (bool success, ) = _owner.call{value: amount}('');\n        if (!success) {\n            revert withdraw_FailedToSendETH();\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                        View / Pure Functions\n    //////////////////////////////////////////////////////////////*/\n    function getTokenPrice() public pure returns (uint256) {\n        return TOKENPRICE;\n    }\n\n    function getNumOfTokenPerNFT() public pure returns (uint256) {\n        return TOKENPERNFT;\n    }\n\n    function getMaxTotalSupply() public pure returns (uint256) {\n        return MAXTOTALSUPPLY;\n    }\n\n    function getAvaiableTokenId(uint256 num) public view returns (bool) {\n        return tokenIdsClaimed[num];\n    }\n}\n\n/**\n * Contract deployed to: 0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\n * Successfully verified contract ICO on Etherscan - https://goerli.etherscan.io/address/0x0547D8Ed6b435d0c5fD526B6F368178De3bce684#code\n */\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/NFTCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/*//////////////////////////////////////////////////////////////   \r\n                            Imports\r\n//////////////////////////////////////////////////////////////*/\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport './IWhitelist.sol';\r\n\r\n/*//////////////////////////////////////////////////////////////   \r\n                            Custom Errors\r\n//////////////////////////////////////////////////////////////*/\r\n\r\nerror presaleMint_PresaleHasNotStarted();\r\nerror presaleMint_NotOnWhitelist();\r\nerror presaleMint_ExceededMaximumSupply();\r\nerror presaleMint_NotEnoughETHSent();\r\nerror mint_PresaleHasNotEnded();\r\nerror mint_NotEnoughETHSent();\r\nerror mint_ExceededMaximumSupply();\r\nerror withdraw_FailedToSendEther();\r\n\r\n/// @title NFT collection\r\n/// @author Kehinde A.\r\n/// @notice This contract is for creating a 20 \"Crypto Dev\" NFT's and each one of them will be unique. User's will beable to mint only 1 NFT with one transaction. Whitelisted users, should have a 5 min presale period before the actual sale where they are guaranteed 1 NFT per transaction.\r\n/// @dev All function calls are currently implemented without side effects\r\ncontract NFTCollection is ERC721Enumerable, Ownable {\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            State variables\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev _baseTokenURI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\r\n     */\r\n    string private s_baseToknURI;\r\n\r\n    // PRICE is the price of one Crypto Dev NFT\r\n    uint256 private constant PRICE = 0.01 ether;\r\n\r\n    //s_paused is used to pause the contract in case of an emergency\r\n    bool private s_paused;\r\n\r\n    // max number of CryptoDevs NFT\r\n    uint256 private constant MAXTOKENIDS = 20;\r\n\r\n    // total number of tokenIds minted\r\n    uint256 private s_tokenIds;\r\n\r\n    // Whitelist contract instance\r\n    IWhitelist whitelist;\r\n\r\n    // boolean to keep track of whether presale started or not\r\n    bool public s_presaleStarted;\r\n\r\n    // timestamp for when presale would end\r\n    uint256 public s_presaleEnded;\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            Modifier\r\n    //////////////////////////////////////////////////////////////*/\r\n    //Update revert to an if statemnet and add to testing !!\r\n    modifier onlyWhenNotPaused() {\r\n        require(!s_paused, 'Contract currently paused');\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            Constructor Function\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev ERC721 constructor takes in a `name` and a `symbol` to the token collection.\r\n     * name in our case is `Crypto Devs` and symbol is `CD`.\r\n     * Constructor for Crypto Devs takes in the baseURI to set _baseTokenURI for the collection.\r\n     * It also initializes an instance of whitelist interface.\r\n     */\r\n    constructor(\r\n        string memory baseURI,\r\n        address whitelistAddress\r\n    ) ERC721('Crypto Devs', 'CD') {\r\n        s_baseToknURI = baseURI;\r\n        whitelist = IWhitelist(whitelistAddress);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                        Function\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev startPresale starts a presale for the whitelisted addresses\r\n     */\r\n    function startPresale() public onlyOwner {\r\n        s_presaleStarted = true;\r\n        s_presaleEnded = block.timestamp + 5 minutes; // Set presaleEnded time as current timestamp + 5 minutes\r\n    }\r\n\r\n    /**\r\n     * @dev presaleMint allows a user to mint one NFT per transaction during the presale.\r\n     */\r\n    function presaleMint() public payable onlyWhenNotPaused {\r\n        if (!(s_presaleStarted) || (block.timestamp > s_presaleEnded)) {\r\n            revert presaleMint_PresaleHasNotStarted();\r\n        }\r\n        if (!(whitelist.getWhitelistedAddresses(msg.sender))) {\r\n            revert presaleMint_NotOnWhitelist();\r\n        }\r\n        // 3 >= 2\r\n        if (s_tokenIds >= MAXTOKENIDS) {\r\n            revert presaleMint_ExceededMaximumSupply();\r\n        }\r\n        if (msg.value < PRICE) {\r\n            revert presaleMint_NotEnoughETHSent();\r\n        }\r\n        s_tokenIds += 1;\r\n        _safeMint(msg.sender, s_tokenIds);\r\n    }\r\n\r\n    /**\r\n     * @dev mint allows a user to mint 1 NFT per transaction after the presale has ended.\r\n     */\r\n    function mint() public payable onlyWhenNotPaused {\r\n        if (!(s_presaleStarted) || (block.timestamp < s_presaleEnded)) {\r\n            revert mint_PresaleHasNotEnded();\r\n        }\r\n        if (s_tokenIds >= MAXTOKENIDS) {\r\n            revert mint_ExceededMaximumSupply();\r\n        }\r\n        if (msg.value < PRICE) {\r\n            revert mint_NotEnoughETHSent();\r\n        }\r\n        s_tokenIds += 1;\r\n        _safeMint(msg.sender, s_tokenIds);\r\n    }\r\n\r\n    /**\r\n     * @dev _baseURI overides the Openzeppelin's ERC721 implementation which by default\r\n     * returned an empty string for the baseURI\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return s_baseToknURI;\r\n    }\r\n\r\n    /**\r\n     * @dev setPaused makes the contract paused or unpaused\r\n     */\r\n    function setPasued(bool status) public onlyOwner {\r\n        s_paused = status;\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw sends all the ether in the contract\r\n     * to the owner of the contract\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        address _owner = owner();\r\n        uint256 amount = address(this).balance;\r\n        (bool sent, ) = _owner.call{value: amount}('');\r\n        if (!sent) {\r\n            revert withdraw_FailedToSendEther();\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            View / Pure Functions\r\n    //////////////////////////////////////////////////////////////*/\r\n    function getPrice() public pure returns (uint256) {\r\n        return PRICE;\r\n    }\r\n\r\n    function getPausedState() public view returns (bool) {\r\n        return s_paused;\r\n    }\r\n\r\n    function getMaxTokenIds() public pure returns (uint256) {\r\n        return MAXTOKENIDS;\r\n    }\r\n\r\n    function getTokenIds() public view returns (uint256) {\r\n        return s_tokenIds;\r\n    }\r\n\r\n    function getpresaleState() public view returns (bool) {\r\n        return s_presaleStarted;\r\n    }\r\n\r\n    function getpresaleEnded() public view returns (uint256) {\r\n        return s_presaleEnded;\r\n    }\r\n\r\n    function getContractBalance() public view onlyOwner returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getBaseURI() public view returns (string memory) {\r\n        return s_baseToknURI;\r\n    }\r\n}\r\n\r\n/**\r\n * Contract deployed to: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\r\n */\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/IWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IWhitelist {\r\n    function getWhitelistedAddresses(address) external view returns (bool);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\n/*//////////////////////////////////////////////////////////////   \r\n                            Custom Errors\r\n//////////////////////////////////////////////////////////////*/\r\nerror purchase_NotEnoughETH();\r\n\r\n/// @title NFT marketplace\r\n/// @author Kehinde A.\r\n/// @notice A Crypto Dev Marketplace. A simplified NFT marketplace to be able to purchase NFTs automatically when a proposal is passed.\r\ncontract NFTMarketplace {\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            State Variables\r\n    //////////////////////////////////////////////////////////////*/\r\n    // Maintain a mapping of TokenID to Owner addressess\r\n    mapping(uint256 => address) private tokens;\r\n\r\n    // Set the purchase price for each NFT\r\n    uint256 private constant NFTPRICE = 0.1 ether;\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            Functions\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // @Dev purchase() accepts ETH and marks the owner of the given tokenID as the caller address\r\n    /// @param _tokenId - the nft token Id to purchase\r\n    function purchase(uint256 _tokenId) external payable {\r\n        if (msg.value != NFTPRICE) {\r\n            revert purchase_NotEnoughETH();\r\n        }\r\n\r\n        tokens[_tokenId] = msg.sender;\r\n    }\r\n\r\n    /// @dev avaiable() checks whether the given tokenId has already been sold or not\r\n    /// @param _tokenId - the fake NFT token Id to purchsae\r\n    function available(uint256 _tokenId) external view returns (bool) {\r\n        if (tokens[_tokenId] == address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /*//////////////////////////////////////////////////////////////   \r\n                            Functions\r\n    //////////////////////////////////////////////////////////////*/\r\n    /// @dev getOwnerOfToken returns the address of the token owner based on the inputed Id\r\n    // @param id - the Id corespponding to the token owner\r\n    function getOwnerOfToken(uint256 id) public view returns (address) {\r\n        return tokens[id];\r\n    }\r\n\r\n    /// @dev getPrice() returns the price of one NFT\r\n    function getNFTPrice() public pure returns (uint256) {\r\n        return NFTPRICE;\r\n    }\r\n}\r\n/**\r\n * NFTMarketplace Contract deployed at: 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\r\n */\r\n"
    },
    "contracts/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/*//////////////////////////////////////////////////////////////   \n                        Custom Errors\n//////////////////////////////////////////////////////////////*/\nerror addAddressToWhitelist_SenderAlreadyWhitelisted();\nerror addAddressToWhitelist_AddressesLimitReached();\n\n/// @title Whitelist dApp\n/// @author Kehinde A.\n/// @notice You can use this contract for creating a whitelist dapp when you are launching your NFT collection\ncontract Whitelist {\n    /*//////////////////////////////////////////////////////////////   \n                            Variables\n    //////////////////////////////////////////////////////////////*/\n\n    //Max number of whitelisted addresses allowed\n    uint8 private immutable i_maxWhitelistedAddresses;\n\n    // Create a mapping of whitelistedAddresses\n    // if an address is whitelisted, we would set it to true, it is false by default for all other addresses.\n    mapping(address => bool) public s_whitelistedAddresses;\n\n    // numAddressesWhitelisted would be used to keep track of how many addresses have been whitelisted\n    // NOTE: Don't change this variable name, as it will be part of verification\n    uint8 s_numAddressesWhitelisted;\n\n    /*//////////////////////////////////////////////////////////////   \n                        Constructor Functions\n    //////////////////////////////////////////////////////////////*/\n\n    // Setting the Max number of whitelisted addresses\n    // User will put the value at the time of deployment\n    constructor(uint8 _maxWhitelistedAddresses) {\n        i_maxWhitelistedAddresses = _maxWhitelistedAddresses;\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                            Functions\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice This function adds the address of the sender to the whitelist\n    function addAddressToWhitelist() public {\n        //check if the user has already been whitelisted\n        if (s_whitelistedAddresses[msg.sender]) {\n            revert addAddressToWhitelist_SenderAlreadyWhitelisted();\n        }\n\n        // check if the numAddressesWhitelisted > maxWhitelistedAddresses, if not then throw an error.\n        if (s_numAddressesWhitelisted > i_maxWhitelistedAddresses) {\n            revert addAddressToWhitelist_AddressesLimitReached();\n        }\n\n        // Add the address which called the function to the whitelistedAddress array\n        s_whitelistedAddresses[msg.sender] = true;\n\n        // Increase the number of whitelisted addresses\n        s_numAddressesWhitelisted += 1;\n    }\n\n    /*//////////////////////////////////////////////////////////////   \n                            Getter Functions\n    //////////////////////////////////////////////////////////////*/\n    function getMaxWhitelistedAddresses() public view returns (uint8) {\n        return i_maxWhitelistedAddresses;\n    }\n\n    function getWhitelistedAddresses(address index) public view returns (bool) {\n        return s_whitelistedAddresses[index];\n    }\n\n    function getNumAddressesWhitelisted() public view returns (uint8) {\n        return s_numAddressesWhitelisted;\n    }\n}\n/**\n * Contract deployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3\n */\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}